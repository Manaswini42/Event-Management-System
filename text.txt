3.Attendee tries to register for a new event:
DECLARE
    v_attendee_id ATTENDEES.ATTENDEE_ID%TYPE;
    v_event_id EVENTS.EVENT_ID%TYPE;
    v_registration_id EVENTS.REGISTRATION_ID%TYPE;
    v_registration_date EVENTS.REGISTRATION_DATE%TYPE;
    v_payment_status_id EVENTS.PAYMENT_STATUS_ID%TYPE;
BEGIN
    -- Prompt user for attendee ID
    v_attendee_id := &Attendee_ID;
 
    -- Prompt user for event ID
    v_event_id := '&Event_ID';
 
    -- Prompt user for registration ID
    v_registration_id := &Registration_ID;
 
    -- Prompt user for registration date
    v_registration_date := TO_DATE('&Registration_Date', 'YYYY-MM-DD');
 
    -- Prompt user for payment status ID
    v_payment_status_id := &Payment_Status_ID;
 
    -- Insert a new record into the EVENTS table
    INSERT INTO EVENTS (
        EVENT_ID,
        ATTENDEE_ID,
        REGISTRATION_ID,
        REGISTRATION_DATE,
        PAYMENT_STATUS_ID
    ) VALUES (
        v_event_id,
        v_attendee_id,
        v_registration_id,
        v_registration_date,
        v_payment_status_id
    );
 
    DBMS_OUTPUT.PUT_LINE('Registration successful!');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

4. Organiser creates a new event:
DECLARE
    v_event_id EVENTS.EVENT_ID%TYPE;
    v_event_name EVENTS.EVENT_NAME%TYPE;
    v_event_description EVENTS.EVENT_DESCRIPTION%TYPE;
    v_event_type_id EVENTS.EVENT_TYPE_ID%TYPE;
    v_venue_id EVENTS.VENUE_ID%TYPE;
    v_organizer_id EVENTS.ORGANIZER_ID%TYPE;
    v_event_date EVENTS.EVENT_DATE%TYPE;
    v_event_time EVENTS.EVENT_TIME%TYPE;
    v_registration_deadline EVENTS.REGISTRATION_DEADLINE%TYPE;
BEGIN
    -- Prompt user for event details
    v_event_id := '&Event_ID';
    v_event_name := '&Event_Name';
    v_event_description := '&Event_Description';
    v_event_type_id := '&Event_Type_ID';
    v_venue_id := &Venue_ID;
    v_organizer_id := &Organizer_ID;
    v_event_date := TO_DATE('&Event_Date', 'YYYY-MM-DD');
    v_event_time := TO_DATE('&Event_Time', 'HH24:MI:SS');
    v_registration_deadline := TO_DATE('&Registration_Deadline', 'YYYY-MM-DD');
 
    -- Insert a new record into the EVENTS table
    INSERT INTO EVENTS (
        EVENT_ID,
        EVENT_NAME,
        EVENT_DESCRIPTION,
        EVENT_TYPE_ID,
        VENUE_ID,
        ORGANIZER_ID,
        EVENT_DATE,
        EVENT_TIME,
        REGISTRATION_DEADLINE
    ) VALUES (
        v_event_id,
        v_event_name,
        v_event_description,
        v_event_type_id,
        v_venue_id,
        v_organizer_id,
        v_event_date,
        v_event_time,
        v_registration_deadline
    );
 
    DBMS_OUTPUT.PUT_LINE('Event created successfully!');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

1) attendee to get all their events they have/had registered

DECLARE
    ID ATTENDEES.ATTENDEE_ID%TYPE := &ID;
    EVENT_NAME EVENTS.EVENT_NAME%TYPE;
BEGIN
    FOR E IN (SELECT EVENT_NAME FROM EVENTS WHERE ATTENDEE_ID = ID) LOOP
        EVENT_NAME := E.EVENT_NAME;
        DBMS_OUTPUT.PUT_LINE(EVENT_NAME);
    END LOOP;
END;
/


PROCEDURE 

CREATE OR REPLACE PROCEDURE ATTENDEE_EVENTS(
    ID IN ATTENDEES.ATTENDEE_ID%TYPE
)
IS
    NAME EVENTS.EVENT_NAME%TYPE;
BEGIN
     FOR E IN (SELECT EVENT_NAME FROM EVENTS WHERE ATTENDEE_ID = ID) LOOP
        NAME := E.EVENT_NAME;
        DBMS_OUTPUT.PUT_LINE(NAME);
    END LOOP;
END;
/



2) organiser to get all their events that have/has created 


DECLARE
    ID ORGANIZERS.ORGANIZER_ID%TYPE := &ID;
    EVENT_NAME EVENTS.EVENT_NAME%TYPE;
BEGIN
    FOR E IN (SELECT EVENT_NAME FROM EVENTS WHERE ORGANIZER_ID = ID) LOOP
        EVENT_NAME := E.EVENT_NAME;
        DBMS_OUTPUT.PUT_LINE(EVENT_NAME);
    END LOOP;
END;
/



PROCEDURE

CREATE OR REPLACE PROCEDURE ORGANIZER_EVENTS (
    p_organizer_id IN ORGANIZERS.ORGANIZER_ID%TYPE
)
IS
    v_event_name EVENTS.EVENT_NAME%TYPE;
BEGIN
    FOR event_rec IN (
        SELECT DISTINCT EVENT_NAME 
        FROM EVENTS 
        WHERE ORGANIZER_ID = p_organizer_id
    ) 
    LOOP
        v_event_name := event_rec.EVENT_NAME;
        DBMS_OUTPUT.PUT_LINE('Event Name: ' || v_event_name);
    END LOOP;
END;
/





FOR EVENT INFO 



CREATE OR REPLACE PROCEDURE GET_EVENT_INFO_BY_NAME (
    p_event_name IN EVENTS.EVENT_NAME%TYPE
)
IS
    v_event_row EVENTS%ROWTYPE;
BEGIN
    SELECT *
    INTO v_event_row
    FROM EVENTS
    WHERE EVENT_NAME = p_event_name;

    DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_event_row.EVENT_ID);
    DBMS_OUTPUT.PUT_LINE('Event Description: ' || v_event_row.EVENT_DESCRIPTION);
    DBMS_OUTPUT.PUT_LINE('Event Type ID: ' || v_event_row.EVENT_TYPE_ID);
    DBMS_OUTPUT.PUT_LINE('Venue ID: ' || v_event_row.VENUE_ID);
    DBMS_OUTPUT.PUT_LINE('Organizer ID: ' || v_event_row.ORGANIZER_ID);
    DBMS_OUTPUT.PUT_LINE('Event Date: ' || v_event_row.EVENT_DATE);
    DBMS_OUTPUT.PUT_LINE('Event Time: ' || v_event_row.EVENT_TIME);
    DBMS_OUTPUT.PUT_LINE('Registration Deadline: ' || v_event_row.REGISTRATION_DEADLINE);
   
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No event found with the provided name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

DESC EVENTS;